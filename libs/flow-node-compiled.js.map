{"version":3,"sources":["flow-node.js"],"names":[],"mappings":"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","file":"flow-node-compiled.js","sourcesContent":["var fs = require('fs'),\n    path = require('path'),\n    util = require('util'),\n    Stream = require('stream').Stream;\n\nmodule.exports = flow = function(temporaryFolder) {\n    var $ = this;\n    $.temporaryFolder = temporaryFolder;\n    $.maxFileSize = null;\n    $.fileParameterName = 'file';\n\n    try {\n        fs.mkdirSync($.temporaryFolder);\n    } catch (e) {}\n\n    function cleanIdentifier(identifier) {\n        return identifier.replace(/[^0-9A-Za-z_-]/g, '');\n    }\n\n    function getChunkFilename(chunkNumber, identifier) {\n        // Clean up the identifier\n        identifier = cleanIdentifier(identifier);\n        // What would the file name be?\n        return path.resolve($.temporaryFolder, './flow-' + identifier + '.' + chunkNumber);\n    }\n\n    function validateRequest(chunkNumber, chunkSize, totalSize, identifier, filename, fileSize) {\n        // Clean up the identifier\n        identifier = cleanIdentifier(identifier);\n\n        // Check if the request is sane\n        if (chunkNumber == 0 || chunkSize == 0 || totalSize == 0 || identifier.length == 0 || filename.length == 0) {\n            return 'non_flow_request';\n        }\n        var numberOfChunks = Math.max(Math.floor(totalSize / (chunkSize * 1.0)), 1);\n        if (chunkNumber > numberOfChunks) {\n            return 'invalid_flow_request1';\n        }\n\n        // Is the file too big?\n        if ($.maxFileSize && totalSize > $.maxFileSize) {\n            return 'invalid_flow_request2';\n        }\n\n        if (typeof(fileSize) != 'undefined') {\n            if (chunkNumber < numberOfChunks && fileSize != chunkSize) {\n                // The chunk in the POST request isn't the correct size\n                return 'invalid_flow_request3';\n            }\n            if (numberOfChunks > 1 && chunkNumber == numberOfChunks && fileSize != ((totalSize % chunkSize) + parseInt(chunkSize))) {\n                // The chunks in the POST is the last one, and the fil is not the correct size\n                return 'invalid_flow_request4';\n            }\n            if (numberOfChunks == 1 && fileSize != totalSize) {\n                // The file is only a single chunk, and the data size does not fit\n                return 'invalid_flow_request5';\n            }\n        }\n\n        return 'valid';\n    }\n\n    //'found', filename, original_filename, identifier\n    //'not_found', null, null, null\n    $.get = function(req, callback) {\n        var chunkNumber = req.param('flowChunkNumber', 0);\n        var chunkSize = req.param('flowChunkSize', 0);\n        var totalSize = req.param('flowTotalSize', 0);\n        var identifier = req.param('flowIdentifier', \"\");\n        var filename = req.param('flowFilename', \"\");\n\n        if (validateRequest(chunkNumber, chunkSize, totalSize, identifier, filename) == 'valid') {\n            var chunkFilename = getChunkFilename(chunkNumber, identifier);\n            fs.exists(chunkFilename, function(exists) {\n                if (exists) {\n                    callback('found', chunkFilename, filename, identifier);\n                } else {\n                    callback('not_found', null, null, null);\n                }\n            });\n        } else {\n            callback('not_found', null, null, null);\n        }\n    };\n\n    //'partly_done', filename, original_filename, identifier\n    //'done', filename, original_filename, identifier\n    //'invalid_flow_request', null, null, null\n    //'non_flow_request', null, null, null\n    $.post = function(req, callback) {\n\n        var fields = req.body;\n        var files = req.files;\n\n        var chunkNumber = fields['flowChunkNumber'];\n        var chunkSize = fields['flowChunkSize'];\n        var totalSize = fields['flowTotalSize'];\n        var identifier = cleanIdentifier(fields['flowIdentifier']);\n        var filename = fields['flowFilename'];\n\n        if (!files[$.fileParameterName] || !files[$.fileParameterName].size) {\n            callback('invalid_flow_request', null, null, null);\n            return;\n        }\n\n        var original_filename = files[$.fileParameterName]['originalFilename'];\n        var validation = validateRequest(chunkNumber, chunkSize, totalSize, identifier, filename, files[$.fileParameterName].size);\n        if (validation == 'valid') {\n            var chunkFilename = getChunkFilename(chunkNumber, identifier);\n\n            // Save the chunk (TODO: OVERWRITE)\n            fs.rename(files[$.fileParameterName].path, chunkFilename, function() {\n\n                // Do we have all the chunks?\n                var currentTestChunk = 1;\n                var numberOfChunks = Math.max(Math.floor(totalSize / (chunkSize * 1.0)), 1);\n                var testChunkExists = function() {\n                    fs.exists(getChunkFilename(currentTestChunk, identifier), function(exists) {\n                        if (exists) {\n                            currentTestChunk++;\n                            if (currentTestChunk > numberOfChunks) {\n                                callback('done', filename, original_filename, identifier);\n                            } else {\n                                // Recursion\n                                testChunkExists();\n                            }\n                        } else {\n                            callback('partly_done', filename, original_filename, identifier);\n                        }\n                    });\n                };\n                testChunkExists();\n            });\n        } else {\n            callback(validation, filename, original_filename, identifier);\n        }\n    };\n\n    // Pipe chunks directly in to an existsing WritableStream\n    //   r.write(identifier, response);\n    //   r.write(identifier, response, {end:false});\n    //\n    //   var stream = fs.createWriteStream(filename);\n    //   r.write(identifier, stream);\n    //   stream.on('data', function(data){...});\n    //   stream.on('finish', function(){...});\n    $.write = function(identifier, writableStream, options) {\n        options = options || {};\n        options.end = (typeof options['end'] == 'undefined' ? true : options['end']);\n\n        // Iterate over each chunk\n        var pipeChunk = function(number) {\n\n            var chunkFilename = getChunkFilename(number, identifier);\n            fs.exists(chunkFilename, function(exists) {\n\n                if (exists) {\n                    // If the chunk with the current number exists,\n                    // then create a ReadStream from the file\n                    // and pipe it to the specified writableStream.\n                    var sourceStream = fs.createReadStream(chunkFilename);\n                    sourceStream.pipe(writableStream, {\n                        end: false\n                    });\n                    sourceStream.on('end', function() {\n                        // When the chunk is fully streamed,\n                        // jump to the next one\n                        pipeChunk(number + 1);\n                    });\n                } else {\n                    // When all the chunks have been piped, end the stream\n                    if (options.end) writableStream.end();\n                    if (options.onDone) options.onDone();\n                }\n            });\n        };\n        pipeChunk(1);\n    };\n\n    $.clean = function(identifier, options) {\n        options = options || {};\n\n        // Iterate over each chunk\n        var pipeChunkRm = function(number) {\n\n            var chunkFilename = getChunkFilename(number, identifier);\n\n            //console.log('removing pipeChunkRm ', number, 'chunkFilename', chunkFilename);\n            fs.exists(chunkFilename, function(exists) {\n                if (exists) {\n\n                    console.log('exist removing ', chunkFilename);\n                    fs.unlink(chunkFilename, function(err) {\n                        if (err && options.onError) options.onError(err);\n                    });\n\n                    pipeChunkRm(number + 1);\n\n                } else {\n\n                    if (options.onDone) options.onDone();\n\n                }\n            });\n        };\n        pipeChunkRm(1);\n    };\n\n    return $;\n};\n"]}